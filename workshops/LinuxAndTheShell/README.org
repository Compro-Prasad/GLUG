#+TITLE: Linux And The Console
#+OPTIONS: toc:nil num:nil timestamp:nil author:nil
#+REVEAL_ROOT: ../../reveal.js
#+REVEAL_TRANS: slide
#+REVEAL_THEME: black
#+REVEAL_EXTRA_CSS: custom.css

* Prerequisites for this workshop
#+ATTR_REVEAL: :frag (appear)
+ Have a *nix system on your laptops
+ Basic understanding of files and directories
+ Basic understanding of text editors and browsers

* Open
#+ATTR_REVEAL: :frag (appear)
+ Text Editor (For notes and questions)
+ Terminal (Apparatus)
+ File Manager (See things graphically)
* What is *nix?
Unix and Unix like systems are commonly referred to as *nix
* Topics to be covered
#+ATTR_REVEAL: :frag (appear)
+ The shell
+ Basic commands
+ Linux file system(not full)
* Why Linux?
#+ATTR_REVEAL: :frag (appear)
+ Working of Computers can be taught in a better way
+ Grab its source code and modify anything
+ Set on the standards of *POSIX* (*UNIX*), *ANSI*, etc.
+ Developer friendly
* Why not Linux?
#+ATTR_REVEAL: :frag (appear)
+ You are religious
+ You have lots of money
+ You are lazy
+ You fear the console
* The ="Hello World!"= program
#+ATTR_REVEAL: :frag (appear)
+ The command
  #+NAME: hello-world-in-shell
  #+BEGIN_SRC shell :exports both :cache yes
  echo 'Hello World!'
  #+END_SRC
+ The output
  #+RESULTS[bdd19f3d6c0729c793788791b9ae3dcf60925676]: hello-world-in-shell
  : Hello World!

* Console vs Shell vs Terminal
** Console composes of
#+ATTR_REVEAL: :frag (appear)
+ Terminal drivers for input and output [ =/dev/tty*= ]
+ Shell for interfacing with the OS and the user

** The Shell
#+ATTR_REVEAL: :frag (appear)
+ It is used to interface with the operating system
+ To see the name of your shell run:
  #+NAME: name-of-shell
  #+BEGIN_SRC shell :exports both :cache yes
    echo $SHELL
  #+END_SRC
+ My output
  #+RESULTS[15232dd9a76117161d2d2396a6a6a3cec4d6b83b]: name-of-shell
  : /bin/bash

+ Other cool shells worth trying out are
  #+ATTR_REVEAL: :frag (appear)
  + =fish=, =zsh=, =csh=, etc.
** Terminal
#+ATTR_REVEAL: :frag (appear)
+ The most common misinterpreted buzzword for consoles
+ It is actually the DRIVER required to run a console
+ Has a legacy name known as ="tty"= or TeleTYpewriter
+ To know what terminal driver you are using, run:
  #+BEGIN_SRC shell :exports code
    echo $TERM
  #+END_SRC

** But what are you running?
#+ATTR_REVEAL: :frag (appear)
+ A shell
+ A console
+ A terminal

** None
#+ATTR_REVEAL: :frag appear
You are running a terminal emulator

* Everything is a FILE in *nix systems
Even a Wikipedia article exists on /Everything is a File/
* Time elapsed since last startup
#+NAME: uptime-command
#+BEGIN_SRC shell :results output :exports both :cache yes
  uptime -p
#+END_SRC
#+RESULTS[a48b79ef3365541dd80715d61cb5ceb16ea90280]: uptime-command
: up 2 days, 23 hours, 38 minutes

* =pwd= command
To check which directory you are currently in

* =ls= command - Lists files
#+ATTR_REVEAL: :frag (appear)
+ Syntax:
  #+BEGIN_SRC shell :exports code
    ls <PATH>
  #+END_SRC
+ If =<PATH>= is not provided then it defaults to the PWD
+ To show all files try ="ls -A"=
+ To get long listing use ="ls -l"=
* How to long list all files?
#+ATTR_REVEAL: :frag (appear)
+ =ls -l-A=
+ =ls -lA=
+ =ls -l -A=
+ =ls -Al=
* Where to get help?
#+ATTR_REVEAL: :frag (appear)
+ =<TAB>= key
+ =man= (ual) pages
+ =<cmd> -h=
+ =<cmd> --help=
+ Search Engines
+ Ask someone
* ="/"= - The Root directory
#+ATTR_REVEAL: :frag (appear)
+ The base of the file system
+ All other directories are listed inside it
+ You cannot go outside it
* The binaries directory
#+ATTR_REVEAL: :frag (appear)
+ =/sbin=
  + Binaries needed for booting
  + Low-level system repair

+ =/bin=
  + Binaries needed for normal system functioning

+ =/usr/bin=
  + Application binaries
  + Accessed by logged in users

+ =/usr/sbin=
  + Application binaries that support or
  + Configure stuff in =/sbin=
* The ="/home"= directory
#+ATTR_REVEAL: :frag (appear)
+ Run the following command:
  #+BEGIN_SRC shell :exports code :cache yes
    echo $HOME
  #+END_SRC
+ A generalized output
  #+RESULTS[de08a75445499dc5314c07a7b0955a2a21442948]:
  : /home/user
* ="/boot"= - The boot directory
Keeps the binaries and configurations required at boot time
* The =<PATH>=
#+ATTR_REVEAL: :frag (appear)
+ Defines the location of a file in the system
+ It is of two types
  #+ATTR_REVEAL: :frag (appear)
  + Absolute
  + Relative
+ ="/bin/"= is absolute but ="bin/"= is relative to the PWD
#+ATTR_REVEAL: :frag appear
So, whatever you type means different in different cases

* Special directories
| =~=  | Home Directory     |
| =.=  | Present Directory  |
| =..= | Previous Directory |
| =/=  | Root Directory     |
* =cd <PATH>= - Change directory
* True and False
#+ATTR_REVEAL: :frag (appear)
+ Run
  #+BEGIN_SRC shell :exports code :cache yes
    true
    false
  #+END_SRC
+ Return values respectively are 0 and 1
* Command = Function
=func a b c= = func(a, b, c)
#+ATTR_REVEAL: :frag appear
Here =func= is the command and =a=, =b=, =c= are the arguments
* Exercise
#+ATTR_REVEAL: :frag (appear)
+ Open a text editor & write the following in it
  #+BEGIN_SRC C -i :results value
int main(int argc, char **argv) {
  return argc - 1;
}
  #+END_SRC
+ Save it as /args.c/ in your =Documents/= directory
+ Run
  #+BEGIN_SRC shell :exports code
    gcc -o args args.c
    ./args && echo $?
    ./args -o args args.c && echo $?
  #+END_SRC
+ Rectify
  #+BEGIN_SRC shell :exports code
    ./args -o args args.c || echo $?
  #+END_SRC

#+RESULTS:

* Make a directory
#+BEGIN_SRC shell :exports code
  mkdir <dir_name>
#+END_SRC

* Make an empty file
#+BEGIN_SRC shell :exports code
  touch <file_name>
#+END_SRC

* Remove an empty directory
Use this when safety is the first priority
#+BEGIN_SRC shell :exports code
  rmdir <dir_name>
#+END_SRC

* Remove any directory
#+ATTR_REVEAL: :frag (appear)
+ Syntax
  #+BEGIN_SRC shell :exports code
    rm -rf <dir_name>
  #+END_SRC
+ Option description
  | -r | Recursively |
  | -f | Force       |
* CLI Editors
** nano
#+ATTR_REVEAL: :frag (appear)
+ =^X= to exit
+ =M-I= to enable Auto Indent
#+ATTR_REVEAL: :frag appear
=M= = =ESC= or =Alt=
** vi
#+ATTR_REVEAL: :frag (appear)
+ A modal editor
  #+ATTR_REVEAL: :frag (appear)
  + Get into Insert mode(=I= or =A=)
  + Get into Command mode(=ESC=)
+ In command mode
  #+ATTR_REVEAL: :frag (appear)
  + Save a file(=:w filename=)
  + Quit (=:q=)
  + Force Quit (=:q!=)
  + Save and Quit (=:wq= or =:x=)
  + Auto indent (=:set autoindent=)
* Job control
** Aborting a process
One of its forms is Ctrl-C or ^C
** Pause a process
#+ATTR_REVEAL: :frag (appear)
+ Use Ctrl-Z to pause the currently running process
+ Use =fg= command to resume the process to run in the =ForeGround=
+ Use =bg= command to resume the process to run in the =BackGround=
** Running a process in the background
#+BEGIN_SRC shell
  <full_command> &
#+END_SRC

* List running processes
#+ATTR_REVEAL: :frag (appear)
+ Default usage
  #+BEGIN_SRC shell :exports code
    ps -e
  #+END_SRC
+ Verbose usage
  #+BEGIN_SRC shell :exports code
    ps aux
  #+END_SRC

* Signaling a process
Signals are sent to a process using the =kill= command
[[file:66795398.jpg]]

** Kill a process
#+ATTR_REVEAL: :frag (appear)
+ Give a last wish
  #+BEGIN_SRC shell :exports code
    kill 1234
  #+END_SRC
+ Show no mercy
  #+BEGIN_SRC shell :exports code
    kill -9 1234
  #+END_SRC

* File redirection
#+ATTR_REVEAL: :frag (appear)
+ Send output elsewhere
+ Example
  #+BEGIN_SRC shell :exports code
    ls -l > ls.txt   # Sends output(stdout) to ls.txt
    cat < ls.txt     # Sends input from ls.txt to cat
  #+END_SRC
+ Replacing =>= with =>>= appends to the file
+ =stderr= is represented as =2>=

* =/dev= - The devices
#+ATTR_REVEAL: :frag (appear)
+ Contains device files
+ Helps in directly interacting with hardware
+ Some files worth mentioning
  + =/dev/null=
  + =/dev/zero=
  + =/dev/input/mice= (may not work)
  + =/dev/input/mouse0= (may not work)
  + =/dev/sd?*/=

* Pipes

* Questions
