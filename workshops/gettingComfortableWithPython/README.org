#+TITLE: Getting comfortable with Python
#+OPTIONS: toc:nil num:nil timestamp:nil author:nil
#+REVEAL_ROOT: ../../reveal.js
#+REVEAL_TRANS: slide
#+REVEAL_THEME: black
#+REVEAL_EXTRA_CSS: ../custom.css

* What to expect
  Lots of *small things* that you can do to have a *better experience* with Python.
* What not to expect
  - Writing =Hello World= program
  - Defining =variables= and =functions=
  - Working with various datatypes like =list=, =dict=, =str=, =int=, etc.
  - =Data structures= and =algorithms=
* Formatted(=f=) strings
** Also known as *string interpolation*
** Works in Python 3.6 and above
** Normal string
   #+begin_src python :results none :exports code
     def get_all_results(table_name):
          return run_query(
               "SELECT * from " + table_name + ";"
          )
   #+end_src
** Using =f= string
   #+begin_src python :results none :exports code
     def get_all_results(table_name):
          return run_query(
               f"SELECT * from {table_name};"
          )
   #+end_src
** Further Reference
   - https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498
   - http://cis.bentley.edu/sandbox/wp-content/uploads/Documentation-on-f-strings.pdf
   - https://realpython.com/python-f-strings/
   - https://www.geeksforgeeks.org/formatted-string-literals-f-strings-python/

* Raw(=r=) strings
** Normal string
   #+begin_src python :results none :exports code
     with open("C:\\Some\\file\\name.txt") as f:
         print(f.read(100))
   #+end_src
** Using =r= string
   #+begin_src python :results none :exports code
     with open(r"C:\Some\file\name.txt") as f:
         print(f.read(100))
   #+end_src
** How are they different
   #+begin_src python :results output :exports both :cache yes
     print(r'Hello\tWorld' != 'Hello\tWorld')
   #+end_src

   #+RESULTS[80e59591d3ac59153d6533a94f1a7692fb557581]:
   : True
** How are they same
   #+begin_src python :results output :exports both :cache yes
     print(r'Hello\tWorld' == 'Hello\\tWorld')
   #+end_src

   #+RESULTS[3bc6926440d3ec9a7987da48a6cf01a3e5f393fc]:
   : True
** Further Reference
   - https://medium.com/dev-genius/beauty-of-raw-strings-in-python-fa627d674cbf
   - https://www.askpython.com/python/string/python-raw-strings

* Exception(Error) handling

** Sample Code
   #+begin_src python :results output :exports both :cache yes
     student = {
         "name": "Ram"
     }
     print(student["mother"])
   #+end_src
   Find the error.

   #+RESULTS[bc7c6660788ccac56e0fea3c3b7a22cddbc09366]:

** Error

   #+begin_example
     Traceback (most recent call last):
     File "<stdin>", line 4, in <module>
     KeyError: 'mother'
   #+end_example
   Here type of the error is =KeyError=. All errors have this information at the
   end of error output.

** Catching errors
   #+begin_src python :results output :exports both :cache yes
     student = {
         "name": "Ram"
     }
     try:
         print(student["mother"])
     except KeyError as error:
         print(f"Key not found {error}")
   #+end_src

   #+RESULTS[8b863413a9fbbedee15d40b745f691f3a737e70c]:
   : Key not found 'mother'

** Catching multiple errors?
   #+begin_src python :results output :exports code :cache yes
     student = {
         "name": "Ram",
         "roll": 1
     }
     keys = ["name", "roll", "dob"]
     for key in keys:
         print("Output:", student[key] + 1)
   #+end_src

** Catching multiple errors (Solution)
   #+begin_src python :results output :exports code :cache yes
     student = {
         "name": "Ram",
         "roll": 1
     }
     keys = ["name", "roll", "dob"]
     for key in keys:
         try:
             print("Output:", student[key] + 1)
         except KeyError as error:
             print(f"Key not found {error}")
         except TypeError:
             print(f"Can't add 1 to '{key}'")
         except Exception as error:
             # Catches all other errors
             print(f"Key: '{key}', Error: {error}")
   #+end_src

   #+RESULTS[2c535d11cab1284644d6b9f5939d50540a28f0d5]:
   : Can't add 1 to 'name'
   : Output: 2
   : Key not found 'dob'

** Further reference
   - https://docs.python.org/3/library/exceptions.html
   - https://www.tutorialspoint.com/python/python_exceptions.htm
   - https://www.programiz.com/python-programming/exception-handling
   - https://www.geeksforgeeks.org/python-exception-handling/

* Object Oriented Programming
 :PROPERTIES:
 :header-args: :session *oop* :results output :exports code
 :END:
** Constructor and Destructor
   #+begin_src python
     class Vehicle:
         """Vehicle docstring"""

         def __init__(self, name, max_speed):
             # constructor
             # Public members
             self.name = name
             self.max_speed = max_speed
             # Private members begin with _
             self._current_speed = 0
             print("Constructed")

         def __del__(self):
             # Destructor
             print("Destroyed")
   #+end_src

   #+RESULTS[c6fd3f6f6eaad979709f201ec148e6514f3cbc4f]:

** Creating an object
   #+begin_src python :exports both :cache yes
     car = Vehicle("Maruti 800", 140)
     print(car)
   #+end_src

   #+RESULTS[4488813f3b878dcddff1d269bbd8e290cd17523f]:
   : Constructed
   : <__main__.Vehicle object at 0x7fe494596d60>

** Inheritance
   #+begin_src python
     class Car(Vehicle):
         """Car doc"""
         def __init__(self, name, max_speed):

             # Call base class constructor
             super().__init__(name, max_speed)

             # Create new members
             self.wheels = 4
   #+end_src

*** Multiple inheritance (Simple way)
    #+begin_src python
      class FlyingCar(Car, Airplane):
          """Docstring for FlyingCar"""

          def __init__(self, name, max_speed):
              Car.__init__(self, name, max_speed)
              Airplane.__init__(self, name, max_speed)
    #+end_src

*** Multiple inheritance (Clean way)
    - https://stackoverflow.com/questions/9575409/calling-parent-class-init-with-multiple-inheritance-whats-the-right-way#9575426
    - https://rhettinger.wordpress.com/2011/05/26/super-considered-super/

** Polymorphism

*** Square class
    #+begin_src python
      class Square:
          """Square doc"""
          def __init__(self, side):
              self.side = side
          def area(self):
              """Find the area"""
              return self.side * self.side
    #+end_src

    #+RESULTS:

*** Circle class
    #+begin_src python
      class Circle:
          """Circle doc"""
          def __init__(self, radius):
              self.radius = radius
          def area(self):
              """Find the area"""
              return 3.1416 * self.radius * self.radius
    #+end_src

    #+RESULTS:

*** Calculate area
    #+begin_src python :exports both :cache yes
      print(Square(5).area())
      print(Circle(5).area())
    #+end_src

    #+RESULTS[f941bdea7885a56369acac364f5e3e70e2bf3213]:
    : 25
    : 78.54

** Abstract classes
   #+begin_src python
     class Foo(metaclass=abc.ABCMeta):
         # No objects can be made of this class
         # Because of abstract methods
         @abc.abstractmethod
         def foo(self):
             # This needs to be implemented
             # after inheritance
             pass
   #+end_src
   Reference: https://stackoverflow.com/questions/26458618/are-python-pure-virtual-functions-possible-and-or-worth-it

** Using =__repr__= and =__str__=

*** Without =__str__=
    #+begin_src python :exports both :cache yes
      print(Vehicle("Maruti 800", 140))
    #+end_src

    #+RESULTS[bc231f696b6ee30bb3f04e1b08b800111b00f140]:
    : <__main__.Vehicle object at 0x7f48b99f4820>

*** Without =__repr__=
    #+begin_src python :exports both :cache yes
      print([Vehicle("Maruti 800", 140), Vehicle("Alto", 140)])
    #+end_src

    #+RESULTS[8dca97948c54c90cb58b59a1a16b8cac825a09c6]:
    : [<__main__.Vehicle object at 0x7f48b991de50>, <__main__.Vehicle object at 0x7f48b98e6e20>]

*** Defining =__str__= and =__repr__=
    #+begin_src python
      class Vehicle:
          """Vehicle docstring"""
          def __init__(self, name, max_speed):
              self.name = name
              self.max_speed = max_speed
              self._current_speed = 0
          def __str__(self):
              # Helps in converting to string
              return f"{self.name}: {self.max_speed}"
          def __repr__(self):
              # Helps in seeing a better version
              return f"<{self}>"
    #+end_src

    #+RESULTS:

*** After effects
    #+begin_src python :exports both :cache yes
      print(Vehicle("Maruti 800", 140))
      print([Vehicle("Maruti 800", 140), Vehicle("Alto", 140)])
    #+end_src

    #+RESULTS[135fe730978895c55f42dc313616088687284b10]:
    : Maruti 800: 140
    : [<Maruti 800: 140>, <Alto: 140>]

* Python Virtual Environment
** Why is it used?
   Isolate different versions of python and python packages.
** How to setup using =venv=
   #+begin_src sh :results raw :exports code
     python -m venv testenv
   #+end_src
   Creates a new directory =testenv= with the python version and builtin modules.

** Loading the environment
   #+begin_src sh :results raw :exports code
     source testenv/bin/activate  # *nix
     testenv\Scripts\activate.bat  # Windows
   #+end_src
   This modifies environment variables like =PATH= which helps in prioritizing
   python from the virtual environment.
** Installing packages
   #+begin_src sh
     pip install requests
     pip install -r requirements.txt
   #+end_src
   This will install all packages in the virtual environment when its activated.

** Unloading the environment
   #+begin_src sh :results raw :exports code
     deactivate
   #+end_src
   This reverts the changes done to the environment variables.

** Further Reference
   - [[https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html][Conda]]
   - [[https://docs.python.org/3/library/venv.html][Venv]]
   - [[https://realpython.com/pipenv-guide/][Pipenv]]

* Running a command

* Using pylint to check code quality

** Some python code
   #+begin_src python :exports code :tangle x.py
     x=1
     print(x)
   #+end_src

** Running =pylint=
   #+begin_src sh :exports both :results output :session *pylint-sh* :cache yes
     pylint x.py
   #+end_src

   #+RESULTS[44c7becbd99036aea2aaac6ecf3257c393b96ea6]:
   : ************* Module x
   : x.py:1:0: C0114: Missing module docstring (missing-module-docstring)
   : x.py:1:0: C0103: Constant name "x" doesn't conform to UPPER_CASE naming style (invalid-name)
   : 
   : ------------------------------------------------------------------
   : Your code has been rated at 0.00/10 (previous run: 0.00/10, +0.00)

* Using black to format code
  #+begin_src sh :exports both :results output :session *black-sh* :cache yes
    black x.py
    echo ----------------------
    cat x.py
  #+end_src

  #+RESULTS[d294f30651053bc03681c5429104cce0877d4c37]:
  : reformatted x.py
  : All done! ✨ 🍰 ✨
  : 1 file reformatted.
  : ----------------------
  : x = 1
  : print(x)

* Running system commands

** =os.system=
   Run an arbitrary command.
   #+begin_src python :results output :exports both :cache yes
     import os
     os.system("echo Hello")
   #+end_src

   #+RESULTS[8293a96f58878c55543ef5e5f5cf6a07ef88a166]:
   : Hello

** =subprocess.check_output=
   Run an arbitrary command and capture its output.
   #+begin_src python :results output :exports both :cache yes
     import subprocess
     print(subprocess.check_output(['echo', 'Hello']))
   #+end_src

   #+RESULTS[5ba2a9af6fd98494686a70574677f9589d83df41]:
   : b'Hello\n'

** =subprocess.run= (Python >= 3.5)
   Run an arbitrary command and capture =stdout=, =stdin= and =stderr=.
   #+begin_src python :results output :exports both :cache yes
     from subprocess import run, PIPE
     lines = "\n" \
         .join(map(str, range(10))) \
         .encode('utf-8')
     cmd = ['head', '-n', '3']
     output = run(cmd, stdout=PIPE, input=lines) \
         .stdout \
         .decode('utf-8')
     print(output)
   #+end_src

   #+RESULTS[8b3e7a65844047ace0c3b20d4ceb6045a4c0ce48]:
   : 0
   : 1
   : 2
   : 

* Running os specific code
  Use =sys.platform= to check for which os are you running

* Using threads

* Debugging using pdb
* TODO Unit testing using doctest
* TODO Importing local modules
** Make sure you don't use module names same as builtins
* TODO Pretty printing large list/dict
* TODO Using datetime and timedelta
* TODO Not using regular expressions
* TODO Good IDEs for Python
** Pycharm
** VS Code with Python plugin
