#+AUTHOR: Operating System Applications
#+OPTIONS: timestamp:nil date:nil toc:nil num:nil
#+REVEAL_ROOT: ../../reveal.js
#+REVEAL_TRANS: slide
#+REVEAL_THEME: black
#+REVEAL_EXTRA_CSS: ../custom.css

* Basics of =python=

** Launching python
#+BEGIN_SRC sh -i
$ python3
Python 3.6.4 (default, Jan  5 2018, 02:35:40)
[GCC 7.2.1 20171224] on linux
Type "help", "copyright", "credits" or "license"
for more information.
>>> _
#+END_SRC

** Print to standard output
#+BEGIN_SRC python -i
print("Hello, World!")
#+END_SRC

** Taking input
#+BEGIN_SRC python -i
testCase = input("Enter a test case: ")
#+END_SRC

** Loops
#+BEGIN_SRC python -i :results output :exports both :cache yes
for i in [4, 2, 3, 3]:
    print(i)
#+END_SRC

#+RESULTS[235c89ce0984ae8ac63320801045eb774975825e]:
: 4
: 2
: 3
: 3

** Slices in String
#+BEGIN_SRC python -i :results output :exports both :cache yes
s = "Hello"
print("0", s)
print("1", s[2])
print("2", s[1:3])
print("3", s[:3])
print("4", s[2:])
#+END_SRC

#+RESULTS[b6fc9c4fe9500a88cba726901f4259db5bbd3f75]:
: 0 Hello
: 1 l
: 2 el
: 3 Hel
: 4 llo

** List Datatype
#+BEGIN_SRC python -i :exports code
l = [1, 5, 2, 24]
l = range(20)
l = range(5, 21, 5)
#+END_SRC

** Dictionaries
#+BEGIN_SRC python -i :results output :exports both :cache yes
d = {"x": 2, "y": 3, 4: 5}
print(d)
print(d["x"])
# print(d[3])
print(d[4])
#+END_SRC

#+RESULTS[085410f2d7a1704d2602ddb832a85dbdafd641a6]:
: {'x': 2, 'y': 3, 4: 5}
: 2
: 5

** Defining functions
#+BEGIN_SRC python -i :exports code
def isPrime(n):
    if n < 2:
        return False
    else if n == 2:
        return True
    else if n % 2 == 0:
        return False
    else:
        for i in range(3, int(n ** i) + 1, 2):
            if (n % i == 0):
                return False
        return True
#+END_SRC

** Mysterious ~__name__~
#+ATTR_REVEAL: :frag (appear)
+ Carries the name of the current module
+ File under execution has the value ~__main__~

*** =myModule.py=
#+BEGIN_SRC python -i :tangle myModule.py :results output :exports code
print(__name__)
#+END_SRC
Run:
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC sh :exports code
$ python3 myModule.py
#+END_SRC
Output:
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC text
__main__
#+END_SRC

*** =other.py=
#+BEGIN_SRC python -i :tangle other.py :results output :exports code
import myModule
print(__name__)
#+END_SRC
Run:
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC sh :exports code
$ python3 other.py
#+END_SRC
Output:
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC text
myModule
__main__
#+END_SRC

* File Handling in Python

** Contents of =filename.txt=
#+BEGIN_EXAMPLE
There is some text

You can write more of it
And enjoy
#+END_EXAMPLE

** Reading a file
#+BEGIN_SRC python -i :results output :exports both :cache yes
f = open("filename.txt", "r")
print(f.read(2))
print(f.readline())
print(f.readline())
print(f.readline())
f.close()
#+END_SRC

#+RESULTS[a50ca1311af3f9277a87415f84214871e58f615a]:
: Th
: ere is some text
:
:
:
: You can write more of it
:

** Read all at once
#+BEGIN_SRC python -i :results output :exports both :cache yes
f = open("filename.txt", "r")  # Open in read mode
print(f.read())
f.close()
#+END_SRC

#+RESULTS[3ea4ffcd3c842299d6b41e100a34dfa7d59bf591]:
: There is some text
:
: You can write more of it
: And enjoy
:

** Writing to a file
#+BEGIN_SRC python -i
f = open("file.txt", "w")  #Open in write mode
f.write("I don't need an editor.")
f.close()
#+END_SRC

* Lambda functions
#+ATTR_REVEAL: :frag (appear)
+ Also known as anonymous function
+ One line only
+ Used for defining in place functions
+ Syntax:
  #+BEGIN_SRC python -i :exports code
square = lambda x: x * x
square(4)
  #+END_SRC

** Merits of lambda
#+ATTR_REVEAL: :frag (appear)
+ It gets the work done
+ If the function definitions are short

** =makeInc= using =lambda=
#+BEGIN_SRC python -i :exports code :session incsession
def makeInc(m):
    return (lambda n: n + m)
#+END_SRC

#+RESULTS:

** Using =makeInc=
#+BEGIN_SRC python -i :cache yes :results output :session incsession :exports code
incBy2 = makeInc(2)
incBy3 = makeInc(3)
print(incBy2(7))
print(incBy3(32))
#+END_SRC
Output:
#+RESULTS[e7590c3681bff4355674536d266540ff74c8dfc9]:
: 9
: 35

** What is missing?
+ Lambda is good in *lisp* like languages and *JavaScript*
+ But not particularly in python
+ Cannot write multiple statements

** Are we done with it?

** Implementing better lambdas
#+BEGIN_SRC python -i :exports code
def makeInc(m):
    def inc(n):
        return n + m
    return inc
#+END_SRC

** Write a =mySort= function
#+ATTR_REVEAL: :frag (appear)
+ Which can sort both increasing and decreasing order on demand
+ Having the following function parameters:
#+ATTR_REVEAL: :frag (appear)
  + =list= to be sorted
  + =compare= to change the order
* Classes and objects
** Point to be noted
#+ATTR_REVEAL: :frag (appear)
+ Python is *not fully object oriented* as it /lacks encapsulation/ i.e. data
  hiding.
+ The concepts of object oriented programming is out of the scope of this
  class.

** What is a =class=?
Basically it means defining a *custom datatype* from the predefined types
and/or inheriting other types.

** Initializing data members
Constructors are used for initializing data members of a class.
#+BEGIN_SRC python -i :results output :exports code :session class
class complex:
    def __init__(self, a: int, b: int):
        # Constructor
        self.real, self.imag = a, b
#+END_SRC

#+RESULTS:

** Class methods/member functions
#+BEGIN_SRC python -i :results output :exports code :session class
class complex:
    def __init__(self, a: int, b: int):
        # Constructor
        self.real, self.imag = a, b
    def __add__(self, x: complex):
        y = complex(self.real + x.real,
                    self.imag + x.imag)
        return y
    def __str__(self):
        r = str(self.real)
        i = str(self.imag)
        return r + "+i" + i
#+END_SRC

#+RESULTS:

** What is an =object=?
Object is an instance of a class.

** Creating an instance
#+BEGIN_SRC python -i :results output :exports code :session class
x = complex(2, 3)
y = complex(-1, 4)
z = x.__add__(y)
print(z.__str__())
print(z.__dict__)
#+END_SRC

#+RESULTS:
: 1+i7
: {'real': 1, 'imag': 7}

** Static data members
#+ATTR_REVEAL: :frag (appear)
+ This kind of data is accessible through the class name
+ Global to all the objects of the same class

** Defining a =class=
#+BEGIN_SRC python -i :exports code
class myClass:
    testVar = 1
#+END_SRC

* Operating system
** How do we do it?
Python provides an interface to the operating system through the =os=
library of functions which contains several system calls to *retrieve*
and *manipulate* different parts of operating system.
#+ATTR_REVEAL: :frag (appear)
#+BEGIN_SRC python -i
import os
#+END_SRC

** What is a process?
*It is an instance of a computer program that is being executed.* A
process in execution requires a processing unit(like CPU) to run the
instructions as specified in the program.
#+BEGIN_SRC python -i
import os
os.exec
os.fork
os.wait
#+END_SRC
** What is forking?
#+ATTR_REVEAL: :frag (appear)
+ A way of cloning processes.
+ Continues execution from the next line.
* Structure and Interpretation of Computer Programming
